// @ts-nocheck

type NumberType = number;

interface A {
    numberTypeField: NumberType;
    integerTypeField: integer;
    bigIntTypeField: bigint;
    stringTypeField: string;
    booleanTypeField: boolean;
    nullTypeField: null;
    undefinedTypeField: undefined;
    anyTypeField: any;
    unknownTypeField: unknown;
    neverTypeField: never;
    numberValueTypeField: 3;
    integerValueTypeField: integer;
    bigIntValueTypeField: 7n;
    stringValueTypeField: 'XB';
    booleanValueTypeField: true;
}

interface B {
    numberTypeField?: NumberType;
    integerTypeField?: integer;
    bigIntTypeField?: bigint;
    stringTypeField?: string;
    booleanTypeField?: boolean;
    nullTypeField?: null;
    undefinedTypeField?: undefined;
    anyTypeField?: any;
    unknownTypeField?: unknown;
    neverTypeField?: never;
    numberValueTypeField?: 3;
    integerValueTypeField?: integer;
    bigIntValueTypeField?: 7n;
    stringValueTypeField?: 'XB';
    booleanValueTypeField?: true;
}

interface C extends A {}

type D = Partial<A>;

interface E {
    /** additional props */
    [propNames: string]: any;
}


interface Z1 {
    foo: ACL.target;
    bar: ACL.value;
    //@maxLength(10) // TODO: BUG: can't set to kind === symlink
    baz: ACL.target;
}

interface ACL {
    target: string;
    @minLength(0)
    value: string;
}

interface Z2 {
    foo: ACL.target;
    bar: ACL.value;
    @maxLength(10)
    baz: ACL.target;
}

interface Foo {
    @match(/^[A-Za-z]+$/)
    name: string;
    @match(/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/)
    email: string;
}

interface Bar {
    foo: Foo
}

interface Baz {
    @minValue('a') @maxValue('z')
    aaa1: string;
    @range('a', 'z')
    aaa2: string;
    @maxValue('z')
    aaa3: string;
    @minValue('a')
    aaa4: string;

    @minValue(-3) @maxValue(5)
    bbb1: integer;
    @range(-3, 5)
    bbb2: integer;
    @maxValue(-3)
    bbb3: integer;
    @minValue(5)
    bbb4: integer;

    /** comment */
    @minValue(-3) @maxValue(5)
    ccc1: number;
    /** comment */
    @range(-3, 5)
    ccc2: number;
    /** comment */
    @maxValue(-3)
    ccc3: number;
    /** comment */
    @minValue(5)
    ccc4: number;
}

interface User {
    userName: Foo.name;
    primaryEmail: Foo.email;
    primaryAliasName: Bar.foo.name;
    aliasNames: Bar.foo.name[];
}


scalar Any
union BigInt = String | Int

scalar RegExp

scalar Map

union PrimitiveValueTypes = Float | BigInt | String | Boolean | Any | Any

union PrimitiveValueTypeNames = String | String | String | String | String | String

union OptionalPrimitiveValueTypeNames = String | String | String | String | String | String

union PlaceholderTypeNames = String | String | String

union OptionalPlaceholderTypeNames = String | String | String

enum ErrorTypes {
    /** comment */
    InvalidDefinition
    /** comment */
    Required
    /** comment */
    TypeUnmatched
    /** comment */
    RepeatQtyUnmatched
    SequenceUnmatched
    ValueRangeUnmatched
    ValuePatternUnmatched
    ValueLengthUnmatched
    ValueUnmatched
}

type ErrorMessages {
    invalidDefinition: String
    required: String
    typeUnmatched: String
    repeatQtyUnmatched: String
    sequenceUnmatched: String
    valueRangeUnmatched: String
    valuePatternUnmatched: String
    valueLengthUnmatched: String
    valueUnmatched: String
}

type TypeAssertionErrorMessageConstraints {
    minValue: Any
    maxValue: Any
    greaterThanValue: Any
    lessThanValue: Any
    minLength: Float
    maxLength: Float
    min: Float
    max: Float
    pattern: String
}

type TypeAssertionErrorMessage {
    code: String!
    message: String!
    dataPath: String!
    constraints: TypeAssertionErrorMessageConstraints!
    value: Any
}

type TypeAssertionBase {
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type NeverTypeAssertion {
    kind: String!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type AnyTypeAssertion {
    kind: String!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type UnknownTypeAssertion {
    kind: String!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type PrimitiveTypeAssertionConstraints {
    minValue: Any
    maxValue: Any
    greaterThanValue: Any
    lessThanValue: Any
    minLength: Float
    maxLength: Float
    pattern: RegExp
}

type PrimitiveTypeAssertion {
    kind: String!
    primitiveName: PrimitiveValueTypeNames
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
    minValue: Any
    maxValue: Any
    greaterThanValue: Any
    lessThanValue: Any
    minLength: Float
    maxLength: Float
    pattern: RegExp
}

type PrimitiveValueTypeAssertion {
    kind: String!
    value: PrimitiveValueTypes
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type RepeatedAssertionConstraints {
    min: Float
    max: Float
}

type RepeatedAssertion {
    kind: String!
    repeated: TypeAssertion!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
    min: Float
    max: Float
}

type SpreadAssertion {
    kind: String!
    spread: TypeAssertion
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
    min: Float
    max: Float
}

type SequenceAssertion {
    kind: String!
    sequence: [TypeAssertion]!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type OneOfAssertion {
    kind: String!
    oneOf: [TypeAssertion]!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type OptionalAssertion {
    kind: String!
    optional: TypeAssertion
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type EnumAssertion {
    kind: String!
    values: [[Any]!]!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

union ObjectAssertionMember = [Any] | [Any] | [Any]

union AdditionalPropsKey = [Any]

union AdditionalPropsMember = [Any] | [Any] | [Any]

type ObjectAssertion {
    kind: String!
    members: [ObjectAssertionMember]!
    additionalProps: [AdditionalPropsMember]
    baseTypes: [Any]
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

type AssertionSymlink {
    kind: String!
    symlinkTargetName: String!
    messageId: String
    message: String
    messages: ErrorMessages
    name: String
    typeName: String
    docComment: String
    passThruCodeBlock: String
    noOutput: Boolean
}

union TypeAssertion = NeverTypeAssertion | AnyTypeAssertion | UnknownTypeAssertion | PrimitiveTypeAssertion | PrimitiveValueTypeAssertion | RepeatedAssertion | SpreadAssertion | SequenceAssertion | OneOfAssertion | OptionalAssertion | EnumAssertion | ObjectAssertion | AssertionSymlink

type ValidationContext {
    checkAll: Boolean
    noAdditionalProps: Boolean
    errorMessages: ErrorMessages
    errors: [TypeAssertionErrorMessage!]!
    typeStack: [Any]!
    schema: TypeAssertionMap
}

type TypeAssertionSetValue {
    ty: TypeAssertion
    exported: Boolean!
    resolved: Boolean!
}

union TypeAssertionMap = Any

type SymbolResolverContext {
    nestLevel: Float!
    symlinkStack: [String!]!
}

type CodegenContext {
    nestLevel: Float!
    schema: TypeAssertionMap
}


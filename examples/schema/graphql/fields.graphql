
scalar Any
union BigInt = String | Int

union NumberType = Float

type A {
    numberTypeField: NumberType!
    integerTypeField: Int!
    bigIntTypeField: BigInt!
    stringTypeField: String!
    booleanTypeField: Boolean!
    nullTypeField: Any!
    undefinedTypeField: Any!
    anyTypeField: Any!
    unknownTypeField: Any!
    neverTypeField: Any!
    numberValueTypeField: Float!
    integerValueTypeField: Int!
    bigIntValueTypeField: BigInt!
    stringValueTypeField: String!
    booleanValueTypeField: Boolean!
}

type B {
    numberTypeField: NumberType
    integerTypeField: Int
    bigIntTypeField: BigInt
    stringTypeField: String
    booleanTypeField: Boolean
    nullTypeField: Any
    undefinedTypeField: Any
    anyTypeField: Any
    unknownTypeField: Any
    neverTypeField: Any
    numberValueTypeField: Float
    integerValueTypeField: Int
    bigIntValueTypeField: BigInt
    stringValueTypeField: String
    booleanValueTypeField: Boolean
}

type C {
    numberTypeField: NumberType!
    integerTypeField: Int!
    bigIntTypeField: BigInt!
    stringTypeField: String!
    booleanTypeField: Boolean!
    nullTypeField: Any!
    undefinedTypeField: Any!
    anyTypeField: Any!
    unknownTypeField: Any!
    neverTypeField: Any!
    numberValueTypeField: Float!
    integerValueTypeField: Int!
    bigIntValueTypeField: BigInt!
    stringValueTypeField: String!
    booleanValueTypeField: Boolean!
}

type D {
    numberTypeField: NumberType
    integerTypeField: Int
    bigIntTypeField: BigInt
    stringTypeField: String
    booleanTypeField: Boolean
    nullTypeField: Any
    undefinedTypeField: Any
    anyTypeField: Any
    unknownTypeField: Any
    neverTypeField: Any
    numberValueTypeField: Float
    integerValueTypeField: Int
    bigIntValueTypeField: BigInt
    stringValueTypeField: String
    booleanValueTypeField: Boolean
}

type E {}

type Z1 {
    foo: String!
    bar: String!
    baz: String!
}

type ACL {
    target: String!
    value: String!
}

type Z2 {
    foo: String!
    bar: String!
    baz: String!
}

enum ErrorTypes {
    /** comment */
    InvalidDefinition
    /** comment */
    Required
    /** comment */
    TypeUnmatched
    /** comment */
    RepeatQtyUnmatched
    SequenceUnmatched
    ValueRangeUnmatched
    ValuePatternUnmatched
    ValueLengthUnmatched
    ValueUnmatched
}

type Foo {
    name: String!
    email: String!
}

type Bar {
    foo: Foo!
}

type Baz {
    aaa1: String!
    aaa2: String!
    aaa3: String!
    aaa4: String!
    bbb1: Int!
    bbb2: Int!
    bbb3: Int!
    bbb4: Int!
    /** comment */
    ccc1: Float!
    /** comment */
    ccc2: Float!
    /** comment */
    ccc3: Float!
    /** comment */
    ccc4: Float!
    ddd1: [Any]!
    ddd2: [Any]!
    ddd3: [Any]!
    ddd4: [Any]!
    ddd5: [Any]!
    ddd6: [Any]!
    eee1: [String!]!
    eee2: [String!]!
    eee3: [String!]!
    eee4: [String!]!
    fff: ErrorTypes!
}

type User {
    userName: String!
    primaryEmail: String!
    primaryAliasName: String!
    aliasNames: [String!]!
}

